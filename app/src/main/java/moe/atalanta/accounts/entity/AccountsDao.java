package moe.atalanta.accounts.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNTS".
*/
public class AccountsDao extends AbstractDao<Accounts, Long> {

    public static final String TABLENAME = "ACCOUNTS";

    /**
     * Properties of entity Accounts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Domain = new Property(1, String.class, "domain", false, "DOMAIN");
        public final static Property Label = new Property(2, String.class, "label", false, "LABEL");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property Remarks = new Property(5, String.class, "remarks", false, "REMARKS");
        public final static Property OnUse = new Property(6, int.class, "onUse", false, "ON_USE");
        public final static Property CreateTime = new Property(7, long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(8, long.class, "updateTime", false, "UPDATE_TIME");
    }


    public AccountsDao(DaoConfig config) {
        super(config);
    }
    
    public AccountsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DOMAIN\" TEXT," + // 1: domain
                "\"LABEL\" TEXT," + // 2: label
                "\"USERNAME\" TEXT," + // 3: username
                "\"PASSWORD\" TEXT," + // 4: password
                "\"REMARKS\" TEXT," + // 5: remarks
                "\"ON_USE\" INTEGER NOT NULL ," + // 6: onUse
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 7: createTime
                "\"UPDATE_TIME\" INTEGER NOT NULL );"); // 8: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Accounts entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String domain = entity.getDomain();
        if (domain != null) {
            stmt.bindString(2, domain);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(3, label);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(6, remarks);
        }
        stmt.bindLong(7, entity.getOnUse());
        stmt.bindLong(8, entity.getCreateTime());
        stmt.bindLong(9, entity.getUpdateTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Accounts entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String domain = entity.getDomain();
        if (domain != null) {
            stmt.bindString(2, domain);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(3, label);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(6, remarks);
        }
        stmt.bindLong(7, entity.getOnUse());
        stmt.bindLong(8, entity.getCreateTime());
        stmt.bindLong(9, entity.getUpdateTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Accounts readEntity(Cursor cursor, int offset) {
        Accounts entity = new Accounts( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // domain
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // label
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remarks
            cursor.getInt(offset + 6), // onUse
            cursor.getLong(offset + 7), // createTime
            cursor.getLong(offset + 8) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Accounts entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDomain(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLabel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemarks(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOnUse(cursor.getInt(offset + 6));
        entity.setCreateTime(cursor.getLong(offset + 7));
        entity.setUpdateTime(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Accounts entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Accounts entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Accounts entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
